AWSTemplateFormatVersion: '2010-09-09'

Description: |
  A highly available, scalable Docker Registry with Application Load Balancer
  and Auto Scaling Group. Docker Compose is used to run NGINX, Docker Registry,
  and Docker Registry Frontend.

Mappings:
  AWSInstanceType2Arch:
    c1.medium:
      Arch: HVM64
    c1.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    m1.large:
      Arch: HVM64
    m1.medium:
      Arch: HVM64
    m1.small:
      Arch: HVM64
    m1.xlarge:
      Arch: HVM64
    m2.2xlarge:
      Arch: HVM64
    m2.4xlarge:
      Arch: HVM64
    m2.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    t1.micro:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.small:
      Arch: HVM64
  AWSInstanceType2NATArch:
    c1.medium:
      Arch: NATHVM64
    c1.xlarge:
      Arch: NATHVM64
    c3.2xlarge:
      Arch: NATHVM64
    c3.4xlarge:
      Arch: NATHVM64
    c3.8xlarge:
      Arch: NATHVM64
    c3.large:
      Arch: NATHVM64
    c3.xlarge:
      Arch: NATHVM64
    c4.2xlarge:
      Arch: NATHVM64
    c4.4xlarge:
      Arch: NATHVM64
    c4.8xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    cc2.8xlarge:
      Arch: NATHVM64
    cr1.8xlarge:
      Arch: NATHVM64
    d2.2xlarge:
      Arch: NATHVM64
    d2.4xlarge:
      Arch: NATHVM64
    d2.8xlarge:
      Arch: NATHVM64
    d2.xlarge:
      Arch: NATHVM64
    g2.2xlarge:
      Arch: NATHVMG2
    g2.8xlarge:
      Arch: NATHVMG2
    hi1.4xlarge:
      Arch: NATHVM64
    hs1.8xlarge:
      Arch: NATHVM64
    i2.2xlarge:
      Arch: NATHVM64
    i2.4xlarge:
      Arch: NATHVM64
    i2.8xlarge:
      Arch: NATHVM64
    i2.xlarge:
      Arch: NATHVM64
    m1.large:
      Arch: NATHVM64
    m1.medium:
      Arch: NATHVM64
    m1.small:
      Arch: NATHVM64
    m1.xlarge:
      Arch: NATHVM64
    m2.2xlarge:
      Arch: NATHVM64
    m2.4xlarge:
      Arch: NATHVM64
    m2.xlarge:
      Arch: NATHVM64
    m3.2xlarge:
      Arch: NATHVM64
    m3.large:
      Arch: NATHVM64
    m3.medium:
      Arch: NATHVM64
    m3.xlarge:
      Arch: NATHVM64
    m4.10xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    m4.4xlarge:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    r3.4xlarge:
      Arch: NATHVM64
    r3.8xlarge:
      Arch: NATHVM64
    r3.large:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    t1.micro:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    ap-northeast-1:
      HVM64: ami-00a5245b4816c38e6
      HVMG2: ami-09d0e0e099ecabba2
    ap-northeast-2:
      HVM64: ami-00dc207f8ba6dc919
      HVMG2: NOT_SUPPORTED
    ap-northeast-3:
      HVM64: ami-0b65f69a5c11f3522
      HVMG2: NOT_SUPPORTED
    ap-south-1:
      HVM64: ami-0ad42f4f66f6c1cc9
      HVMG2: ami-0244c1d42815af84a
    ap-southeast-1:
      HVM64: ami-05b3bcf7f311194b3
      HVMG2: ami-0e46ce0d6a87dc979
    ap-southeast-2:
      HVM64: ami-02fd0b06f06d93dfc
      HVMG2: ami-0c0ab057a101d8ff2
    ca-central-1:
      HVM64: ami-07423fb63ea0a0930
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      HVM64: ami-053617c9d818c1189
      HVMG2: NOT_SUPPORTED
    cn-northwest-1:
      HVM64: ami-0f7937761741dc640
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      HVM64: ami-0cfbf4f6db41068ac
      HVMG2: ami-0aa1822e3eb913a11
    eu-north-1:
      HVM64: ami-86fe70f8
      HVMG2: ami-32d55b4c
    eu-west-1:
      HVM64: ami-08935252a36e25f85
      HVMG2: ami-0d5299b1c6112c3c7
    eu-west-2:
      HVM64: ami-01419b804382064e4
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      HVM64: ami-0dd7e7ed60da8fb83
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      HVM64: ami-05145e0b28ad8e0b2
      HVMG2: NOT_SUPPORTED
    us-east-1:
      HVM64: ami-0080e4c5bc078760e
      HVMG2: ami-0aeb704d503081ea6
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
      HVMG2: NOT_SUPPORTED
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044
      HVMG2: ami-0a7fc72dc0e51aa77
    us-west-2:
      HVM64: ami-01e24be29428c15b2
      HVMG2: ami-0fe84a5b4563d8f27


Outputs:
  ASGId:
    Description: Logical ID of the Auto Scaling Group resource
    Value: !Ref DockerRegistryAutoScalingGroup
  ALBPublicDNS:
    Description: Public DNS for the Application Load Balancer
    Value: !Sub '${ElasticLoadBalancingV2LoadBalancer.DNSName}'

Parameters:

  InstanceType:
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.small
    Description: WebServer EC2 instance type
    Type: String
  KeyName:
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName


  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IPv4 CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to SSH to the EC2 instances
    MaxLength: '18'
    MinLength: '9'
    Type: String

  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    ConstraintDescription: Must be a list of at least two existing subnets associated
      with at least two different availability zones. They should reside in the
      selected Virtual Private Cloud.
    Description: The list of Subnet IDs in your Virtual Private Cloud (VPC)

  VpcId:
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: Must be the VPC ID of an existing Virtual Private Cloud.
    Description: VPC ID of your existing Virtual Private Cloud (VPC)

  WebServerCapacity:
    ConstraintDescription: Must be between 1 and 5 EC2 instances.
    Default: '1'
    Description: The initial number of EC2 instances
    MaxValue: '5'
    MinValue: '1'
    Type: Number

Resources:

  ElasticLoadBalancingV2LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Subnets: !Ref Subnets

  ElasticLoadBalancingV2Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
        Type: forward
      LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
      Port: 80
      Protocol: HTTP

  ElasticLoadBalancingV2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /v2/
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 5043
      Protocol: HTTPS
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: true
      - Key: stickiness.type
        Value: lb_cookie
      - Key: stickiness.lb_cookie.duration_seconds
        Value: 30
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId: !Ref VpcId

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              docker: []
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root
            /etc/init/docker-registry.conf:
              content: !Sub |
                description     "Start Docker Registry"
                author          "Nickolas Kraus"

                start on runlevel [2345]
                stop on runlevel [!2345]

                respawn

                exec /docker-registry/run.sh
              mode: '000400'
              owner: root
              group: root
            /docker-registry/docker-compose.yml:
              content: !Sub |
                nginx:
                  # Note: Only nginx:alpine supports bcrypt.
                  # If you don't need to use bcrypt, you can use a different tag.
                  # Ref: https://github.com/nginxinc/docker-nginx/issues/29
                  image: "nginx:alpine"
                  ports:
                    - 5043:443
                  links:
                    - registry:registry
                  volumes:
                    - ./auth:/etc/nginx/conf.d
                    - ./nginx.conf:/etc/nginx/nginx.conf:ro

                registry:
                  image: registry:2
                  ports:
                    - 127.0.0.1:5000:5000
                  volumes:
                    - ./data:/var/lib/registry
              mode: '000400'
              owner: root
              group: root
            /docker-registry/nginx.conf:
              content: !Sub |
                events {
                    worker_connections  1024;
                }

                http {

                  upstream docker-registry {
                    server registry:5000;
                  }

                  ## Set a variable to help us decide if we need to add the
                  ## 'Docker-Distribution-Api-Version' header.
                  ## The registry always sets this header.
                  ## In the case of nginx performing auth, the header is unset
                  ## since nginx is auth-ing before proxying.
                  map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
                    '' 'registry/2.0';
                  }

                  server {
                    listen 443 ssl;
                    server_name localhost;

                    # SSL
                    ssl_certificate /etc/nginx/conf.d/domain.crt;
                    ssl_certificate_key /etc/nginx/conf.d/domain.key;

                    # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
                    ssl_protocols TLSv1.1 TLSv1.2;
                    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
                    ssl_prefer_server_ciphers on;
                    ssl_session_cache shared:SSL:10m;

                    # disable any limits to avoid HTTP 413 for large image uploads
                    client_max_body_size 0;

                    # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)
                    chunked_transfer_encoding on;

                    location /v2/ {
                      # Do not allow connections from docker 1.5 and earlier
                      # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
                      if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
                        return 404;
                      }

                      # To add basic authentication to v2 use auth_basic setting.
                      # auth_basic "Registry realm";
                      # auth_basic_user_file /etc/nginx/conf.d/nginx.htpasswd;

                      ## If $docker_distribution_api_version is empty, the header is not added.
                      ## See the map directive above where this variable is defined.
                      add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;

                      # Amazon's Elastic Load Balancer (ELB) in HTTPS mode already sets the
                      # following client header:
                      #
                      #   X-Real-IP
                      #   X-Forwarded-For
                      #   X-Forwarded-Proto
                      #
                      # If you have an NGINX instance sitting behind it, remove the following
                      # lines from the NGINX config below:
                      #
                      #   proxy_set_header  X-Real-IP         $remote_addr;
                      #   proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
                      #   proxy_set_header  X-Forwarded-Proto $scheme;

                      # set the HTTP protocol version for proxying to 1.1
                      proxy_http_version 1.1;

                      proxy_pass                          http://docker-registry;
                      proxy_set_header  Host              $http_host;   # required for docker client's sake
                      # proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
                      # proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
                      # proxy_set_header  X-Forwarded-Proto $scheme;
                      proxy_read_timeout                  900;
                    }
                  }
                }
              mode: '000400'
              owner: root
              group: root
            /docker-registry/run.sh:
              content: !Sub |
                #!/usr/bin/env bash

                ###############################################################################
                # run.sh is executed on the host and is used to start the Docker Compose
                # service.
                ###############################################################################

                # set path to Docker Registry
                DOCKER_REGISTRY='/docker-registry'

                # start Docker Daemon
                service docker start

                # create required directories
                mkdir -p $DOCKER_REGISTRY/auth $DOCKER_REGISTRY/data

                # create certificate pair
                openssl req \
                  -x509 \
                  -nodes \
                  -days 365 \
                  -newkey rsa:2048 \
                  -sha256 \
                  -keyout $DOCKER_REGISTRY/auth/domain.key \
                  -out $DOCKER_REGISTRY/auth/domain.crt \
                  -subj "/C=US/ST=Iowa/L=Ames/O=Nickolas Kraus/CN=*.compute-1.amazonaws.com"

                # update trusted certificate store
                cp $DOCKER_REGISTRY/auth/domain.crt /etc/pki/ca-trust/source/anchors/domain.crt
                update-ca-trust
                service docker restart

                # start Docker Registry service
                docker-compose \
                  -f $DOCKER_REGISTRY/docker-compose.yml \
                  -p docker-registry \
                  up
              mode: '000500'
              owner: root
              group: root
          commands:
            01_download_docker_compose:
              command: !Sub |
                curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            02_chmod_docker_compose:
              command: !Sub |
                chmod +x /usr/local/bin/docker-compose
            03_ln_docker_compose:
              command: !Sub |
                ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
            04_run_docker_compose:
              command: !Sub |
                initctl start docker-registry
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              docker:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId:
        !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch, !Ref 'InstanceType', Arch]]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref DockerRegistrySecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            # install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
            # signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource DockerRegistryAutoScalingGroup --region ${AWS::Region}

  DockerRegistryAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: !Ref WebServerCapacity
        Timeout: PT05M
    Properties:
      DesiredCapacity: !Ref WebServerCapacity
      LaunchConfigurationName: !Ref LaunchConfig
      MaxSize: 5
      MinSize: 1
      TargetGroupARNs:
        - !Ref ElasticLoadBalancingV2TargetGroup
      VPCZoneIdentifier: !Ref Subnets
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
        PauseTime: PT05M
        WaitOnResourceSignals: true

  DockerRegistrySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access from the ALB and SSH access
      SecurityGroupIngress:
      - FromPort: 5043
        IpProtocol: tcp
        SourceSecurityGroupId:
          !Select [ 0, !GetAtt ElasticLoadBalancingV2LoadBalancer.SecurityGroups ]
        ToPort: 5043
      - CidrIp: !Ref SSHLocation
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      VpcId: !Ref VpcId
