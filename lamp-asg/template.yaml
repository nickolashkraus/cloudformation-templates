AWSTemplateFormatVersion: '2010-09-09'

Description: |
  A highly available, scalable LAMP stack with an Amazon RDS database,
  Application Load Balancer, and Auto Scaling Group.

Mappings:
  AWSInstanceType2Arch:
    c1.medium:
      Arch: HVM64
    c1.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    m1.large:
      Arch: HVM64
    m1.medium:
      Arch: HVM64
    m1.small:
      Arch: HVM64
    m1.xlarge:
      Arch: HVM64
    m2.2xlarge:
      Arch: HVM64
    m2.4xlarge:
      Arch: HVM64
    m2.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    t1.micro:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.small:
      Arch: HVM64
  AWSInstanceType2NATArch:
    c1.medium:
      Arch: NATHVM64
    c1.xlarge:
      Arch: NATHVM64
    c3.2xlarge:
      Arch: NATHVM64
    c3.4xlarge:
      Arch: NATHVM64
    c3.8xlarge:
      Arch: NATHVM64
    c3.large:
      Arch: NATHVM64
    c3.xlarge:
      Arch: NATHVM64
    c4.2xlarge:
      Arch: NATHVM64
    c4.4xlarge:
      Arch: NATHVM64
    c4.8xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    cc2.8xlarge:
      Arch: NATHVM64
    cr1.8xlarge:
      Arch: NATHVM64
    d2.2xlarge:
      Arch: NATHVM64
    d2.4xlarge:
      Arch: NATHVM64
    d2.8xlarge:
      Arch: NATHVM64
    d2.xlarge:
      Arch: NATHVM64
    g2.2xlarge:
      Arch: NATHVMG2
    g2.8xlarge:
      Arch: NATHVMG2
    hi1.4xlarge:
      Arch: NATHVM64
    hs1.8xlarge:
      Arch: NATHVM64
    i2.2xlarge:
      Arch: NATHVM64
    i2.4xlarge:
      Arch: NATHVM64
    i2.8xlarge:
      Arch: NATHVM64
    i2.xlarge:
      Arch: NATHVM64
    m1.large:
      Arch: NATHVM64
    m1.medium:
      Arch: NATHVM64
    m1.small:
      Arch: NATHVM64
    m1.xlarge:
      Arch: NATHVM64
    m2.2xlarge:
      Arch: NATHVM64
    m2.4xlarge:
      Arch: NATHVM64
    m2.xlarge:
      Arch: NATHVM64
    m3.2xlarge:
      Arch: NATHVM64
    m3.large:
      Arch: NATHVM64
    m3.medium:
      Arch: NATHVM64
    m3.xlarge:
      Arch: NATHVM64
    m4.10xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    m4.4xlarge:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    r3.4xlarge:
      Arch: NATHVM64
    r3.8xlarge:
      Arch: NATHVM64
    r3.large:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    t1.micro:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    ap-northeast-1:
      HVM64: ami-00a5245b4816c38e6
      HVMG2: ami-09d0e0e099ecabba2
    ap-northeast-2:
      HVM64: ami-00dc207f8ba6dc919
      HVMG2: NOT_SUPPORTED
    ap-northeast-3:
      HVM64: ami-0b65f69a5c11f3522
      HVMG2: NOT_SUPPORTED
    ap-south-1:
      HVM64: ami-0ad42f4f66f6c1cc9
      HVMG2: ami-0244c1d42815af84a
    ap-southeast-1:
      HVM64: ami-05b3bcf7f311194b3
      HVMG2: ami-0e46ce0d6a87dc979
    ap-southeast-2:
      HVM64: ami-02fd0b06f06d93dfc
      HVMG2: ami-0c0ab057a101d8ff2
    ca-central-1:
      HVM64: ami-07423fb63ea0a0930
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      HVM64: ami-053617c9d818c1189
      HVMG2: NOT_SUPPORTED
    cn-northwest-1:
      HVM64: ami-0f7937761741dc640
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      HVM64: ami-0cfbf4f6db41068ac
      HVMG2: ami-0aa1822e3eb913a11
    eu-north-1:
      HVM64: ami-86fe70f8
      HVMG2: ami-32d55b4c
    eu-west-1:
      HVM64: ami-08935252a36e25f85
      HVMG2: ami-0d5299b1c6112c3c7
    eu-west-2:
      HVM64: ami-01419b804382064e4
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      HVM64: ami-0dd7e7ed60da8fb83
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      HVM64: ami-05145e0b28ad8e0b2
      HVMG2: NOT_SUPPORTED
    us-east-1:
      HVM64: ami-0080e4c5bc078760e
      HVMG2: ami-0aeb704d503081ea6
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
      HVMG2: NOT_SUPPORTED
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044
      HVMG2: ami-0a7fc72dc0e51aa77
    us-west-2:
      HVM64: ami-01e24be29428c15b2
      HVMG2: ami-0fe84a5b4563d8f27

Outputs:
  ASGId:
    Description: Logical ID of the Auto Scaling Group resource
    Value: !Ref WebServerGroup
  WebsiteURL:
    Description: Website URL for the Auto Scaling Group
    Value: !Sub 'http://${ElasticLoadBalancingV2LoadBalancer.DNSName}'

Parameters:

  DBAllocatedStorage:
    ConstraintDescription: Must be between 5 and 1024Gb.
    Default: '5'
    Description: Size of the database (Gb)
    MaxValue: '1024'
    MinValue: '5'
    Type: Number

  DBInstanceClass:
    AllowedValues:
    - db.t1.micro
    - db.m1.small
    - db.m1.medium
    - db.m1.large
    - db.m1.xlarge
    - db.m2.xlarge
    - db.m2.2xlarge
    - db.m2.4xlarge
    - db.m3.medium
    - db.m3.large
    - db.m3.xlarge
    - db.m3.2xlarge
    - db.m4.large
    - db.m4.xlarge
    - db.m4.2xlarge
    - db.m4.4xlarge
    - db.m4.10xlarge
    - db.r3.large
    - db.r3.xlarge
    - db.r3.2xlarge
    - db.r3.4xlarge
    - db.r3.8xlarge
    - db.m2.xlarge
    - db.m2.2xlarge
    - db.m2.4xlarge
    - db.cr1.8xlarge
    - db.t2.micro
    - db.t2.small
    - db.t2.medium
    - db.t2.large
    ConstraintDescription: Must select a valid database instance type.
    Default: db.t2.small
    Description: Database instance type
    Type: String

  DBName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
    Default: database
    Description: Name of MySQL database
    MaxLength: '64'
    MinLength: '1'
    Type: String

  DBPassword:
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Must contain only alphanumeric characters.
    Description: Password for MySQL database
    MaxLength: '32'
    MinLength: '1'
    NoEcho: true
    Type: String

  DBUser:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
    Default: dbuser
    Description: Username for MySQL database
    MaxLength: '16'
    MinLength: '1'
    NoEcho: true
    Type: String

  InstanceType:
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.small
    Description: WebServer EC2 instance type
    Type: String
  KeyName:
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

  MultiAZDatabase:
    AllowedValues:
    - true
    - false
    ConstraintDescription: Must be either true or false.
    Default: false
    Description: Create a Multi-AZ MySQL Amazon RDS database instance
    Type: String

  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IPv4 CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to SSH to the EC2 instances
    MaxLength: '18'
    MinLength: '9'
    Type: String

  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    ConstraintDescription: Must be a list of at least two existing subnets associated
      with at least two different availability zones. They should reside in the
      selected Virtual Private Cloud.
    Description: The list of Subnet IDs in your Virtual Private Cloud (VPC)

  VpcId:
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: Must be the VPC ID of an existing Virtual Private Cloud.
    Description: VPC ID of your existing Virtual Private Cloud (VPC)

  WebServerCapacity:
    ConstraintDescription: Must be between 1 and 5 EC2 instances.
    Default: '3'
    Description: The initial number of EC2 instances
    MaxValue: '5'
    MinValue: '1'
    Type: Number

Resources:

  ElasticLoadBalancingV2LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Subnets: !Ref Subnets

  ElasticLoadBalancingV2Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
        Type: forward
      LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
      Port: 80
      Protocol: HTTP

  ElasticLoadBalancingV2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: true
      - Key: stickiness.type
        Value: lb_cookie
      - Key: stickiness.lb_cookie.duration_seconds
        Value: 30
      UnhealthyThresholdCount: 5
      VpcId: !Ref VpcId

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80

  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow database access on port 3306
      SecurityGroupIngress:
      - FromPort: 3306
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref WebServerSecurityGroup
        ToPort: 3306
      VpcId: !Ref VpcId

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              php: []
              php-mysql: []
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root
            /var/www/html/index.php:
              content: !Sub |
                <html>
                  <head>
                    <title>AWS CloudFormation PHP Sample</title>
                    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
                  </head>
                  <body>
                    <h1>Welcome to the AWS CloudFormation PHP Sample</h1>
                    <?php
                      // Print out the current data and time
                      print "The Current Date and Time is: <br/>";
                      print date("g:i A l, F j Y.");
                    ?>
                    <?php
                      // Setup a handle for CURL
                      $curl_handle=curl_init();
                      curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);
                      curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);
                      // Get the hostname of the intance from the instance metadata
                      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');
                      $hostname = curl_exec($curl_handle);
                      if (empty($hostname))
                      {
                        print "Sorry, for some reason, we got no hostname back <br />";
                      }
                      else
                      {
                        print "Server = " . $hostname . "<br />";
                      }
                      // Get the instance-id of the intance from the instance metadata
                      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');
                      $instanceid = curl_exec($curl_handle);
                      if (empty($instanceid))
                      {
                        print "Sorry, for some reason, we got no instance id back <br />";
                      }
                      else
                      {
                        print "EC2 instance-id = " . $instanceid . "<br />";
                      }
                      $Database   = "${MySQLDatabase.Endpoint.Address}";
                      $DBUser     = "${DBUser}";
                      $DBPassword = "${DBPassword}";
                      print "Database = " . $Database . "<br />";
                      $dbconnection = mysql_connect($Database, $DBUser, $DBPassword)
                                      or die("Could not connect: " . mysql_error());
                      print ("Connected to $Database successfully");
                      mysql_close($dbconnection);
                    ?>
                    <h2>PHP Information</h2>
                    <?php
                      phpinfo();
                    ?>
                  </body>
                </html>
              mode: '000600'
              owner: apache
              group: apache
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId:
        !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch, !Ref 'InstanceType', Arch]]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            # install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
            # signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerGroup --region ${AWS::Region}

  MySQLDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      DBName: !Ref DBName
      Engine: MySQL
      MasterUserPassword: !Ref DBPassword
      MasterUsername: !Ref DBUser
      MultiAZ: !Ref MultiAZDatabase
      VPCSecurityGroups:
        - !GetAtt DBEC2SecurityGroup.GroupId

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: !Ref WebServerCapacity
        Timeout: PT5M
    Properties:
      DesiredCapacity: !Ref WebServerCapacity
      LaunchConfigurationName: !Ref LaunchConfig
      MaxSize: 5
      MinSize: 1
      TargetGroupARNs:
        - !Ref ElasticLoadBalancingV2TargetGroup
      VPCZoneIdentifier: !Ref Subnets
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access from the ALB and SSH access
      SecurityGroupIngress:
      - FromPort: 80
        IpProtocol: tcp
        SourceSecurityGroupId:
          !Select [ 0, !GetAtt ElasticLoadBalancingV2LoadBalancer.SecurityGroups ]
        ToPort: 80
      - CidrIp: !Ref SSHLocation
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      VpcId: !Ref VpcId
